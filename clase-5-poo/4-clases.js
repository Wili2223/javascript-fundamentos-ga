// ðŸ§  Tema: Clases (Sintaxis Moderna) ðŸŽ“

// Instrucciones:
// - LeÃ© cada consigna y escribÃ­ tu cÃ³digo donde se indica.
// - UsÃ¡ `console.log()` para mostrar los resultados cuando se indique.
// - EjecutÃ¡ este archivo con el comando: node 4-clases.js

//--------------------------------------------------
// 1. Sintaxis y mÃ©todos de instancia y de clase
//--------------------------------------------------

// ðŸ‘‰ Paso 1: CreÃ¡ una clase llamada Mascota con:
// - Un constructor que reciba nombre, especie y edad, y los asigne como propiedades.
// - Un mÃ©todo de instancia llamado presentarse que retorne "Hola, soy [nombre], soy un [especie] y tengo [edad] aÃ±os".
// - Un mÃ©todo de clase (static) llamado esMascota(obj) que retorne true si el objeto es instancia de Mascota.
class Mascota {
  constructor(nombre, especie, edad) {
    this.nombre = nombre;
    this.especie = especie;
    this.edad = edad;
  }


  presentarse() {
    return `Hola, soy ${this.nombre}, soy un ${this.especie} y tengo ${this.edad} aÃ±os`;
  }

  
  static esMascota(obj) {
    return obj instanceof Mascota;
  }
}

// ðŸ‘‰ Paso 2: CreÃ¡ dos instancias de Mascota: mascota1 (nombre: "Luna", especie: "perro", edad: 4) y mascota2 (nombre: "Milo", especie: "gato", edad: 2).
const mascota1 = new Mascota("Luna", "perro", 4);
const mascota2 = new Mascota("Milo", "gato", 2);


// ðŸ‘‰ Paso 3: MostrÃ¡ en consola el resultado de llamar a presentarse en ambas mascotas y usÃ¡ el mÃ©todo de clase para verificar si mascota1 es una Mascota.
console.log(mascota1.presentarse()); 
console.log(mascota2.presentarse()); 
console.log(Mascota.esMascota(mascota1)); 

//--------------------------------------------------
// 2. PrÃ¡ctica con clases, mÃ©todos y propiedades computadas
//--------------------------------------------------

// ðŸ‘‰ Paso 4: CreÃ¡ una clase llamada Libro con:
// - Un constructor que reciba tÃ­tulo, autor, aÃ±o y gÃ©nero, y los asigne como propiedades.
// - Un mÃ©todo resumen que retorne "El libro [tÃ­tulo] de [autor] fue publicado en [aÃ±o] y es del gÃ©nero [gÃ©nero]".
// - Una propiedad computada (getter) llamada descripcionCorta que retorne "[tÃ­tulo] - [autor]".
class Libro {
  constructor(titulo, autor, aÃ±o, genero) {
    this.titulo = titulo;
    this.autor = autor;
    this.aÃ±o = aÃ±o;
    this.genero = genero;
  }
  resumen() {
    return `El libro ${this.titulo} de ${this.autor} fue publicado en ${this.aÃ±o} y es del gÃ©nero ${this.genero}`;
  }
  get descripcionCorta() {
    return `${this.titulo} - ${this.autor}`;
  }
}

// ðŸ‘‰ Paso 5: CreÃ¡ un array llamado biblioteca con al menos 3 instancias de Libro, de distintos gÃ©neros.
const biblioteca = [
  new Libro("Cien aÃ±os de soledad", "Gabriel GarcÃ­a MÃ¡rquez", 1967, "Realismo mÃ¡gico"),
  new Libro("1984", "George Orwell", 1949, "DistopÃ­a"),
  new Libro("El seÃ±or de los anillos", "J.R.R. Tolkien", 1954, "FantasÃ­a Ã©pica")
];

// ðŸ‘‰ Paso 6: UsÃ¡ map() para crear un array con los resÃºmenes de todos los libros de la biblioteca y guardalo en una variable llamada resumenesLibros.
const resumenesLibros = biblioteca.map(libro => libro.resumen());

// ðŸ‘‰ Paso 7: UsÃ¡ filter() para crear un array llamado librosDeFiccion con solo los libros cuyo gÃ©nero sea "ficciÃ³n".
const librosDeFiccion = biblioteca.filter(libro => libro.genero === "ficciÃ³n");


// ðŸ‘‰ Paso 8: UsÃ¡ map() para crear un array con las descripciones cortas de los libros de la biblioteca y guardalo en una variable llamada descripcionesCortas.
const descripcionesCortas = biblioteca.map(libro => libro.descripcionCorta);

//--------------------------------------------------
// 3. SelecciÃ³n de opciÃ³n correcta
//--------------------------------------------------

// ðŸ‘‰ Paso 9: SeleccionÃ¡ la opciÃ³n correcta sobre mÃ©todos estÃ¡ticos en clases:
// GuardÃ¡ la letra de la opciÃ³n correcta en la variable 'respuestaClase1'.
// OpciÃ³n A: Solo pueden usarse desde instancias.
// OpciÃ³n B: Se llaman desde la clase, no desde la instancia.
// OpciÃ³n C: No existen en JavaScript.
let respuestaClase1 = 'B';

// ðŸ‘‰ Paso 10: SeleccionÃ¡ la opciÃ³n correcta sobre getters en clases:
// GuardÃ¡ la letra de la opciÃ³n correcta en la variable 'respuestaClase2'.
// OpciÃ³n A: Permiten definir propiedades computadas que se acceden como atributos.
// OpciÃ³n B: Solo funcionan en funciones constructoras.
// OpciÃ³n C: No pueden retornar strings.
let respuestaClase2 = 'A';

//--------------------------------------------------
// 4. PrÃ¡ctica combinada
//--------------------------------------------------

// ðŸ‘‰ Paso 11: CreÃ¡ una funciÃ³n llamada crearMascotasDesdeArray que reciba un array de objetos con nombre, especie y edad,
// y retorne un array de instancias de Mascota.
function crearMascotasDesdeArray(arr) {
  return arr.map(item => new Mascota(item.nombre, item.especie, item.edad));
}

// ðŸ‘‰ Paso 12: UsÃ¡ la funciÃ³n anterior con el array:
const arrayMascotas = [{nombre: "Rocky", especie: "perro", edad: 6}, {nombre: "Pelusa", especie: "gato", edad: 3}]
const mascotas = crearMascotasDesdeArray(arrayMascotas);
// MostrÃ¡ en consola el resultado de presentarse de cada mascota creada y verificÃ¡ con el mÃ©todo de clase si son instancias de Mascota.
mascotas.forEach(m => {
  console.log(m.presentarse()); // mÃ©todo de instancia
  console.log("Â¿Es Mascota?", Mascota.esMascota(m)); // mÃ©todo de clase
});
// No modifiques el cÃ³digo debajo de este comentario
module.exports = {
  Mascota,
  mascota1,
  mascota2,
  Libro,
  biblioteca,
  resumenesLibros,
  librosDeFiccion,
  descripcionesCortas,
  respuestaClase1,
  respuestaClase2,
  crearMascotasDesdeArray,
};